# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

import sys
from collections import Dict
from pathlib import Path
from utils import Variant, StringSlice

from .registry import ConfigRegistryDict

alias OptionType = Int32


@value
@register_passable("trivial")
struct OptionTypeEnum:
    """
    Enum struct for representing all valid option value types as used in a command
    line argument.
    """

    alias INT: OptionType = 0
    alias FLOAT: OptionType = 1
    alias PATH: OptionType = 2
    alias PATH_LIST: OptionType = 3
    alias BOOL: OptionType = 4
    alias STRING: OptionType = 5


alias OptionValue = Variant[Int, Float64, Path, List[Path], Bool, String]


def parse_args() -> List[String]:
    """
    This helper function trims the first two run_pipeline.mojo and <pipeline_name> arguments.
    It then returns the remaining list of user arguments.
    """

    args = sys.argv()
    user_args = List[String]()
    # We start parsing from index 2 because index 0 and 1 are run_pipeline.mojo
    # and <pipeline name> respectively that are already consumed by the caller.
    index = 2
    while index < len(args):
        # To accomodate for the scenario in which a '=' is passed in a valid argument
        # we must only split when the argument string starts with a '--' and a '=' is provided
        # this indicates that both a key and value are provided and must be split
        # we then split, at most once, seperating the key from the value.
        if "=" in args[index] and args[index].startswith("--"):
            user_args.extend(str(args[index]).split("=", 1))
        else:
            user_args.append(String(args[index]))
        index += 1

    return user_args


# Ideally, this should just be a ConfigRegistry trait / struct, but this requires
# more engineering effort to implement the required set of interfaces around types
# and values. We just pass in the underlying dict for now.
def register_pipeline_configs(
    config_registry: ConfigRegistryDict,
    args: List[String],
    default_config: Dict[String, OptionValue],
) -> Dict[String, OptionValue]:
    """
    This function takes in a given list of user CLI arguments and based on a provided
    registered options dict, it returns a dictionary of String keys
    to OptionValue values.

    Args:
        config_registry: A dictionary used for registering options where we
                            expect users to provide one or more values for each key.
        args: List of arguments and values. This is typically what's in
                sys.argv().
        default_config: A config dictionary used as a fallback if users do not
                            specify them as CLI argument(s).

    Returns:
        A dictionary of CLI options with keys and their corresponding values.

    Raises:
        An unsupported CLI argument flag if it's not presented in the
        user provided config_registry dictionary.
    """
    cli_config = Dict[String, OptionValue]()

    index = 0
    while index < len(args):
        if not args[index].startswith("--"):
            raise "CLI argument: `" + str(
                args[index]
            ) + "`. Valid arguments should start with --"

        # Trim leading "--" from user provided arg.
        # For example, "--temperature" will become "temperature".
        curr_arg = args[index][2:]

        if curr_arg not in config_registry:
            raise "Unsupported CLI argument: " + str(args[index])

        if config_registry[curr_arg] == OptionTypeEnum.BOOL:
            cli_config[curr_arg] = True
        else:
            # parse and cast the value to the appropriate type.
            if index + 1 >= len(args):
                raise "Missing value for parameter `" + str(args[index]) + "`"

            if config_registry[curr_arg] == OptionTypeEnum.INT:
                cli_config[curr_arg] = atol(args[index + 1])
            elif config_registry[curr_arg] == OptionTypeEnum.FLOAT:
                cli_config[curr_arg] = atof(args[index + 1])
            elif config_registry[curr_arg] == OptionTypeEnum.PATH:
                cli_config[curr_arg] = Path(args[index + 1])
            elif config_registry[curr_arg] == OptionTypeEnum.PATH_LIST:
                temp_list = List[Path]()
                # super hacky, figure out a more elegant way to do this.
                if curr_arg in cli_config:
                    curr_val = cli_config[curr_arg]
                    temp_list = curr_val[List[Path]]
                temp_list.append(Path(args[index + 1]))
                cli_config[curr_arg] = temp_list
            else:  # String / also acts as a fallback to make them stringly typed.
                cli_config[curr_arg] = args[index + 1]
            index += 1
        index += 1

    # Now that we've populated result_dict with arguments that are specified via
    # the CLI, there might still be some configs that require us to fallback into
    # default values. So we check and update result_dict against user provided
    # default configs.
    for entry in cli_config.items():
        default_config[entry[].key] = entry[].value
    return default_config
